import fire
from lolbo_nanocrystal.scripts.optimize import Optimize
from lolbo_nanocrystal.lolbo.nanocrystal_objective import NanoCrystalObjective
from lolbo_nanocrystal.lolbo.utils.nanocrystal_utils.models.data_utils import load_nanocrystal_train_data, compute_train_zs


class NanoCrystalOptimization(Optimize):
    """
    Run LOLBO Optimization for any Molecular Optimization Task using the SELFIES VAE 
    (Must be either a GuacaMol Task or the Penalized LogP task)

    Args:
        path_to_vae_statedict: Path to state dict of pretrained SELFIES VAE,
        max_string_length: Limit on string length that can be generated by VAE (without a limit we can run into OOM issues)
    """
    def __init__(
        self,
        path_to_vae_statedict: str=None,
        path_to_vae_ckpt: str="/sandbox/vkolluru/Gen_models_for_FANTASTX/May2023/1_LOLBO/practice/pt_model/m19/lightning_logs/NanoCrystalVAE/version_4/checkpoints/last.ckpt",
        fp_label: str='bag-of-bonds',
        fp_tolerances=[0.04, 0.7],
        **kwargs
    ):
        self.path_to_vae_statedict = path_to_vae_statedict
        self.path_to_vae_ckpt = path_to_vae_ckpt
        self.fp_label = fp_label
        self.fp_tolerances = fp_tolerances

        super().__init__(**kwargs)

        # add args to method args dict to be logged by wandb
        self.method_args['molopt'] = locals()
        del self.method_args['molopt']['self']

    def initialize_objective(self):
        # initialize molecule objective
        self.objective = NanoCrystalObjective(
            path_to_vae_statedict=self.path_to_vae_statedict,
            path_to_vae_ckpt=self.path_to_vae_ckpt,
            fp_label=self.fp_label,
            fp_tolerances=self.fp_tolerances
        )

        # if train zs have not been pre-computed for particular vae, compute them 
        #   by passing initialization selfies through vae 
        if self.init_train_z is None:
            self.init_train_z = compute_train_zs(
                self.objective,
                self.init_train_x,
                self.init_train_graph_embeds
            )

        return self

    def load_train_data(self):
        ''' Load in or randomly initialize self.num_initialization_points
            total initial data points to kick-off optimization 
            Must define the following:
                self.init_train_x (a list of x's)
                self.init_train_y (a tensor of scores/y's)
                self.init_train_z (a tensor of corresponding latent space points)
            '''
        assert self.num_initialization_points <= 20_000 
        
        self.init_train_x, self.init_train_graph_embeds, self.init_train_z, self.init_train_y  = load_nanocrystal_train_data(
            num_initialization_points=self.num_initialization_points, # default is 10000 in Optimize
            path_to_vae_statedict=self.path_to_vae_statedict
        )

        if self.verbose:
            print("Loaded initial training data")
            print("train x shape:", self.init_train_x.shape)

        return self


if __name__ == "__main__":
    fire.Fire(NanoCrystalOptimization)
